import os
import pathlib
import json

from django import forms
from django.utils.translation import gettext_lazy as _


# user model for auth
AUTH_USER_MODEL = "accounts.User"

# Administration backed available at /admin or whatever configured above
ADMIN_PATH = os.getenv("ADMIN_PATH", "admin_path")

# from django 3.2
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# custom date/datetime format
DEFAULT_DATE_FORMAT = os.getenv("DEFAULT_DATE_FORMAT", "%d/%m/%Y")
DEFAULT_TIME_FORMAT = os.getenv("DEFAULT_TIME_FORMAT", "%H:%M")
DEFAULT_DATETIME_FORMAT = f"{DEFAULT_DATE_FORMAT} {DEFAULT_TIME_FORMAT}"

# override globals
DATE_INPUT_FORMATS = [
    DEFAULT_DATE_FORMAT,
    "%Y-%m-%d",
]
DATETIME_INPUT_FORMATS = [
    DEFAULT_DATETIME_FORMAT,
    f"%Y-%m-%d {DEFAULT_TIME_FORMAT}",
]

# BootstrapItalia datepicker
JS_DEFAULT_DATE_FORMAT = os.getenv("JS_DEFAULT_DATE_FORMAT", "dd/MM/yyyy")
JS_DEFAULT_DATETIME_FORMAT = os.getenv("JS_DEFAULT_DATETIME_FORMAT", "DD/MM/Y hh:mm")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "change-me-in-production")

# SECURITY WARNING: do not run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "yes")
if not DEBUG:
    SESSION_EXPIRE_AT_BROWSER_CLOSE = True
    SESSION_COOKIE_AGE = int(os.getenv("SESSION_COOKIE_AGE", "32400"))  # default 9 hrs
    CSRF_COOKIE_HTTPONLY = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True

# HOSTNAME: used to build defaults for CSRF_TRUSTED_ORIGINS, EMAIL, etc.
HOSTNAME = os.getenv("HOSTNAME", "uniticket.hostname.url")

# CSRF trusted origins (comma-separated)
CSRF_TRUSTED_ORIGINS = [
    o.strip() for o in os.getenv("CSRF_TRUSTED_ORIGINS", f"https://{HOSTNAME}").split(",") 
    if o.strip()
]

# ALLOWED_HOSTS (comma-separated)
ALLOWED_HOSTS = [
    h.strip() for h in os.getenv("ALLOWED_HOSTS", "*").split(",") if h.strip()
]


DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.getenv("DB_NAME", os.path.join(BASE_DIR, "db.sqlite3")),
        "HOST": os.getenv("DB_HOST", ""),
        "USER": os.getenv("DB_USER", ""),
        "PASSWORD": os.getenv("DB_PASSWORD", ""),
        "PORT": os.getenv("DB_PORT", ""),
        "OPTIONS": json.loads(os.getenv("DB_OPTIONS", "{}"))
    }
}

# Application definition
INSTALLED_APPS = [
    "accounts",

    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.humanize",
    "django.contrib.messages",
    "django.contrib.sessions",
    "django.contrib.staticfiles",

    "datatables_ajax",

    "uni_ticket_bootstrap_italia_template",
    # "django_unical_bootstrap_italia",
    "django_fumg_bootstrap_italia",
    "bootstrap_italia_template",
    
    "markdownx",

    # "bootstrapform",
    "uni_ticket",
    "django_form_builder",
    "nested_admin",
    "organizational_area",

    # Django Rest
    "rest_framework",
    # "rest_framework.authtoken",
    "api_rest",

    # Django channels and chat
    # "channels",
    # "chat",

    # Libreria per la generazione dei PDF
    # "wkhtmltopdf",
    
    "djangosaml2",
    "django_spid_cie_sp",
    "app_io",

    # protocollo webservice in uso
    # ogni universit√† dovrebbe interfacciare il proprio
    # "archipro_ws",

    # advanced search builder
    "admin_adv_search_builder",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "accounts.middlewares.AccountsChangeDataMiddleware",
]

if "djangosaml2" in INSTALLED_APPS:
    MIDDLEWARE.append("djangosaml2.middleware.SamlSessionMiddleware")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

SAFE_URL_APPS = ["admin", "accounts", "api_rest", "django_spid_cie_sp"]

HOME_PAGE = os.getenv("HOME_PAGE", "/")

# Static files (CSS, JavaScript, Images)
DATA_DIR = os.path.join(BASE_DIR, "data")

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(DATA_DIR, "static")
if not os.path.exists(STATIC_ROOT):
    pathlib.Path(STATIC_ROOT).mkdir(parents=True, exist_ok=True)

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(DATA_DIR, "media")
if not os.path.exists(MEDIA_ROOT):
    pathlib.Path(MEDIA_ROOT).mkdir(parents=True, exist_ok=True)

# used for pdf creation and other temporary files
CACHE_DIR = "uni_ticket_project_cache"
TMP_DIR = os.path.sep.join((BASE_DIR, CACHE_DIR, "tmp"))
if not os.path.exists(TMP_DIR):
    pathlib.Path(TMP_DIR).mkdir(parents=True, exist_ok=True)


# DjangoSAML2 conf
if "django_spid_cie_sp" in INSTALLED_APPS:
    from django_spid_cie_sp.settings import *
    MIDDLEWARE.append("djangosaml2.middleware.SamlSessionMiddleware")
    CIE_SP_METADATA = os.getenv("CIE_SP_METADATA", "tuo_path/metadata/metadata_cie_signed.xml")
    SPID_SP_METADATA = os.getenv("SPID_SP_METADATA", "/tuo_path/metadata/metadata_spid_signed.xml")
    KEY_FILE = os.getenv("KEY_FILE", "/tuo_path/certificates/key.pem") 
    CERT_FILE = os.getenv("CERT_FILE", "/tuo_path/certificates/crt.pem")
    CIE_PROD = os.getenv("CIE_PROD", False).lower() in ("true", "1", "yes")
    SPID_PROD = os.getenv("SPID_PROD", False).lower() in ("true", "1", "yes")
    SPID_VALIDATION = os.getenv("SPID_VALIDATION", False).lower() in ("true", "1", "yes")
    SPID_SP_ENTITY_ID = os.getenv("SPID_SP_ENTITY_ID", "")
    try:
        SPID_SP_ATTRIBUTE_CONSUMER_SERVICE_INDEX = int(
            os.getenv("SPID_SP_ATTRIBUTE_CONSUMER_SERVICE_INDEX", "1")
        )
    except ValueError:
        SPID_SP_ATTRIBUTE_CONSUMER_SERVICE_INDEX = 1

LOCAL_URL_PREFIX = os.getenv("LOCAL_URL_PREFIX", "local")
LOCAL_LOGIN_URL = f"{LOCAL_URL_PREFIX}/login/"
LOCAL_LOGOUT_URL = f"{LOCAL_URL_PREFIX}/logout/"

ALLOW_USER_REGISTRATION = os.getenv("ALLOW_USER_REGISTRATION", False).lower() in ("true", "1", "yes")
LOCAL_REGISTRATION_URL = os.getenv("LOCAL_REGISTRATION_URL", "account/create/")

LOGOUT_REDIRECT_URL = os.getenv("LOGOUT_REDIRECT_URL", "/")

# custom forms (django-form-builder)
CUSTOM_WIDGETS_IN_FORMSETS = False
CUSTOM_WIDGETS = {
    "BaseDateField": "bootstrap_italia_template.widgets.BootstrapItaliaDateWidget",
    "BaseDateTimeSimpleField": "uni_ticket_bootstrap_italia_template.widgets.UniTicketDateTimeWidget",
    "CustomSelectBoxField": "bootstrap_italia_template.widgets.BootstrapItaliaSelectWidget",
    "CustomRadioBoxField": "bootstrap_italia_template.widgets.BootstrapItaliaRadioWidget",
    # "BaseDateField": forms.widgets.DateInput(),
    # "DateField": forms.widgets.DateInput(),
    # "CustomSelectBoxField": forms.widgets.Select(),
    # "CustomRadioBoxField": forms.widgets.RadioSelect(),
    "TextAreaField": forms.widgets.Textarea(attrs={"rows":2})
}

# This parameters define the roles of users to open ticket
# If True, an employee is a user that has this parameter filled (in user model)
# If False, an employee is a user that is mapped as OrganizationalStructureOfficeEmployee
EMPLOYEE_ATTRIBUTE_NAME = "identificativo_dipendente"
# If True, an internal user (not guest) is a user that has this filled (in user model)
# If False, an internal user is a user that is mapped as OrganizationalStructureOfficeEmployee
USER_ATTRIBUTE_NAME = "identificativo_utente"
USER_ATTRIBUTE_LABEL = "utente"


# Email CONFIGURATION
EMAIL_SENDER = os.getenv("EMAIL_SENDER", f"ticket.no-reply@{HOSTNAME}")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "uniticket-noreply@server.it")
SERVER_EMAIL = os.getenv("SERVER_EMAIL", "uniticket-error@server.it")
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.server.it")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587"))
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True").lower() in ("true", "1", "yes")
EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", "False").lower() in ("true", "1", "yes")

# needed to have debug var in template context
INTERNAL_IPS = (
    "127.0.0.1",
)

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_PAGINATION_CLASS": "api_rest.pagination.StandardPagination",
    "PAGE_SIZE": int(os.getenv("PAGE_SIZE", "10")),
}

# chat: message to load in a conversation from history
MESSAGES_TO_LOAD = 1500

if "channels" in INSTALLED_APPS:
    ASGI_APPLICATION = "uni_ticket_project.routing.application"
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [("127.0.0.1", 6379)],
            },
        },
    }


_admins_env = os.getenv(
    "ADMINS",
    "name:email,othername:otheremail",
)

ADMINS = []
for admin_str in _admins_env.split(","):
    admin_str = admin_str.strip()
    if ":" in admin_str:
        name_part, email_part = admin_str.split(":", 1)
        name_part = name_part.strip()
        email_part = email_part.strip()
        if name_part and email_part:
            ADMINS.append((name_part, email_part))

LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
    "verbose": {
        "format": "%(levelname)s [%(asctime)s] %(module)s %(message)s"
        },
    },
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse"
        }
    },
    "handlers": {
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler"
        },
        "console": {
            "level": LOG_LEVEL,
            "class": "logging.StreamHandler",
        },
        "file": {
            "class": "logging.FileHandler",
            "level": LOG_LEVEL,
            "formatter": "verbose",
            "filename": "/var/log/uniticket/uniticket.log",
        },
        'spid_cie_access_file': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': '/var/log/uniticket/access.log',  # path personalizzabile ma la cartella di destinazione deve essere presente
            'when': 'midnight',       # rotazione ogni giorno a mezzanotte
            'interval': 1,            # ogni 1 giorno
            'backupCount': 730,       # conserva 730 file, cio√® 2 anni circa
            'formatter': 'verbose',
        },
        'spid_cie_error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': '/var/log/uniticket/error.log',  # path personalizzabile ma la cartella di destinazione deve essere presente
            'when': 'midnight',
            'interval': 1,
            'backupCount': 730,
            'formatter': 'verbose',
        },
        "null": {
            "class": "logging.NullHandler",
        },
    },
    "loggers": {
        "": {
            "handlers": ["console", "mail_admins",],
            "level": LOG_LEVEL,
            "propagate": False,
        },
        "django": {
            "handlers": ["console","mail_admins"],
            "propagate": False,
            "level": LOG_LEVEL,
        },
        # disables Invalid HTTP_HOST header emails
        "django.security.DisallowedHost": {
            "handlers": ["console"],
            "level": "CRITICAL",
            "propagate": False,
        },
         'spid_cie.access': {
            'handlers': ['spid_cie_access_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'spid_cie.error': {
            'handlers': ['spid_cie_error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        "saml2.sigver": {
            "handlers": ["null"],
            "level": "WARNING",
            "propagate": False,
        },
        # "django.request": {
            # "handlers": ["mail_admins"],
            # "level": LOG_LEVEL,
            # "propagate": True,
        # },
        # "djangosaml2": {
            # "handlers": ["console"],
            # "level": LOG_LEVEL,
        # },
    }
}

# file validation
PDF_FILETYPE = ("application/pdf",)
DATA_FILETYPE = ("text/csv", "application/json",
                 "application/vnd.ms-excel",
                 "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                 "application/vnd.oasis.opendocument.spreadsheet",
                 "application/wps-office.xls",
                 )
TEXT_FILETYPE = ("text/plain",
                 "application/vnd.oasis.opendocument.text",
                 "application/msword",
                 "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                )
IMG_FILETYPE = ("image/jpeg", "image/png", "image/gif", "image/x-ms-bmp")
P7M_FILETYPE = ("application/pkcs7-mime",)
SIGNED_FILETYPE = PDF_FILETYPE + P7M_FILETYPE
PERMITTED_UPLOAD_FILETYPE = TEXT_FILETYPE + DATA_FILETYPE + IMG_FILETYPE + SIGNED_FILETYPE

# maximum permitted filename lengh in attachments, uploads
ATTACH_NAME_MAX_LEN = int(os.getenv("ATTACH_NAME_MAX_LEN", "50"))

# 2.5MB - 2621440
# 5MB - 5242880
# 10MB - 10485760
# 20MB - 20971520
# 50MB - 5242880
# 100MB 104857600
# 250MB - 214958080
# 500MB - 429916160
MAX_UPLOAD_SIZE = int(os.getenv("MAX_UPLOAD_SIZE", "10485760"))

# UNITICKET JWE support
UNITICKET_JWE_RSA_KEY_PATH = os.getenv(
    "UNITICKET_JWE_RSA_KEY_PATH", "tuo_path/certificates/key.pem"
)
# end JWE support

# CAPTCHA encryption
CAPTCHA_SECRET = os.getenv("CAPTCHA_SECRET", "secret").encode("utf-8")
CAPTCHA_SALT = os.getenv("CAPTCHA_SALT", "salt").encode("utf-8")
CAPTCHA_EXPIRATION_TIME = int(os.getenv("CAPTCHA_EXPIRATION_TIME", "45000"))
CAPTCHA_DEFAULT_LANG = os.getenv("CAPTCHA_DEFAULT_LANG", "it")

# Internationalization
# Set to False to avoid problems with javascript datepickers
# (that use the DATE_INPUT_FORMATS and DATETIME_INPUT_FORMATS)
# The template uses {% localize on %} tag to localize dates
USE_L10N = os.getenv("USE_L10N", "False").lower() in ("true", "1", "yes")
USE_I18N = os.getenv("USE_I18N", "True").lower() in ("true", "1", "yes")
USE_TZ = os.getenv("USE_TZ", "True").lower() in ("true", "1", "yes")

LANGUAGE_CODE = os.getenv("LANGUAGE_CODE", "it")
TIME_ZONE = os.getenv("TIME_ZONE", "Europe/Rome")

LOCALE_PATHS = [
    p.strip()
    for p in os.getenv("LOCALE_PATHS", os.path.join(BASE_DIR, "locale")).split(",")
    if p.strip()
]

LANGUAGES = (
  ("it", _("Italiano")),
  ("en", _("Inglese")),
)

# PROTOCOLLO, questi valori possono variare sulla base di come
# vengono istruite le pratiche all"interno del sistema di protocollo di riferimento

PROTOCOL_PACKAGE = "titulus_ws" # archipro_ws

# from archipro_ws.settings import *
from titulus_ws.settings import *

PROTOCOL_PACKAGE = os.getenv("PROTOCOL_PACKAGE", "titulus_ws")
PROTOCOL_CLASS = f"{PROTOCOL_PACKAGE}.protocollo"
PROTOCOL_UTILS = f"{PROTOCOL_PACKAGE}.utils"

# DEFAULT EMAIL
PROTOCOL_EMAIL_DEFAULT = os.getenv("PROTOCOL_EMAIL_DEFAULT", "default@example.pec.it")

# TEST PARAMS
PROTOCOL_TEST_AOO = os.getenv("PROTOCOL_TEST_AOO", "test_aoo_value")
PROTOCOL_TEST_FASCICOLO = os.getenv("PROTOCOL_TEST_FASCICOLO", "test_fascicolo_value")
PROTOCOL_TEST_FASCICOLO_ANNO = os.getenv("PROTOCOL_TEST_FASCICOLO_ANNO", "test_fascicolo_anno_value")
PROTOCOL_TEST_AGD = os.getenv("PROTOCOL_TEST_AGD", "test_agd_value")
PROTOCOL_TEST_UO = os.getenv("PROTOCOL_TEST_UO", "test_uo_value")
PROTOCOL_TEST_UO_RPA = os.getenv("PROTOCOL_TEST_UO_RPA", "test_uo_rpa_value")
PROTOCOL_TEST_TITOLARIO = os.getenv("PROTOCOL_TEST_TITOLARIO", "test_titolario_value")

# ENDPOINTS (TEST AND PRODUCTION)
PROTOCOL_TEST_URL = os.getenv("PROTOCOL_TEST_URL", "URL_TEST")
PROTOCOL_URL = os.getenv("PROTOCOL_URL", "URL_PROD")

# PROTOCOL_NAMESPACES
PROTOCOL_NAMESPACES = {
    "xsd": "{http://www.w3.org/2001/XMLSchema}",
    "ns0": "{http://www.kion.it/titulus}",
    "ns1": "{http://schemas.xmlsoap.org/soap/encoding/}",
    "ns2": "{titulus prod URL namespace}",
}

PROTOCOL_NAMESPACES_DEBUG = {
    "xsd": "{http://www.w3.org/2001/XMLSchema}",
    "ns0": "{http://www.kion.it/titulus}",
    "ns1": "{http://schemas.xmlsoap.org/soap/encoding/}",
    "ns2": "{titulus pre-prod URL namespace}",
}

# TEST CREDENTIALS
PROTOCOL_TEST_LOGIN = os.getenv("PROTOCOL_TEST_LOGIN", "TEST_LOGIN")
PROTOCOL_TEST_PASSW = os.getenv("PROTOCOL_TEST_PASSW", "TEST_PASSWORD")

# XML flusso Titulus
PROTOCOL_XML = """
<doc tipo="arrivo" cod_amm_aoo="{cod_amm_aoo}">
    <autore>{autore}</autore>
    <oggetto>{oggetto}</oggetto>
    <classif cod="{cod_classif}">{classif}</classif>
    <allegato>{allegato}</allegato>
    <rif_interni>
        <rif_interno diritto="RPA"
                     nome_persona="{nome_persona_rif_interno}"
                     nome_uff="{nome_uff_rif_interno}"
                     cod_uff="{cod_uff_rif_interno}"/>
    </rif_interni>
    <rif_esterni>
        <rif_esterno codice_fiscale="{codice_fiscale_rif_esterno}">
            <nome cod="{cod_nome_rif_esterno}">
                {nome_rif_esterno}
            </nome>
            <indirizzo email="{email_rif_esterno}"
                       fax="{fax_rif_esterno}"
                       tel="{tel_rif_esterno}"
                       xml:space="preserve">
                {indirizzo}
            </indirizzo>
        </rif_esterno>
    </rif_esterni>
</doc>

"""

# XML flusso ArchiPRO
# PROTOCOL_XML = """<Segnatura xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
# <Intestazione>
# <Oggetto>{oggetto}</Oggetto>
# <Identificatore>
# <CodiceAmministrazione>UNICAL</CodiceAmministrazione>
# <CodiceAOO>{aoo}</CodiceAOO>
# <Flusso>E</Flusso>
# </Identificatore>
# <Mittente>

# <Dipendente id="{identificativo_dipendente}">
# <Denominazione>{denominazione_persona}</Denominazione>
# </Dipendente>

# <Studente id="{identificativo_utente}">
# <Denominazione>{denominazione_persona}</Denominazione>
# </Studente>

# <Persona id="{id_persona}">
# <Nome>{nome_persona}</Nome>
# <Cognome>{cognome_persona}</Cognome>
# </Persona>

# </Mittente>
# <Destinatario>
# <Amministrazione>
# <Denominazione>UNICAL</Denominazione>
# <CodiceAmministrazione>UNICAL</CodiceAmministrazione>
# <IndirizzoTelematico tipo="smtp">{email}</IndirizzoTelematico>
# <UnitaOrganizzativa id=""/>
# </Amministrazione>
# </Destinatario>
# <Classifica>
# <CodiceTitolario>{id_titolario}</CodiceTitolario>
# </Classifica>
# <!--  Informazioni sul fascicolo  -->
# <Fascicolo numero="{fascicolo_numero}" anno="{fascicolo_anno}"/>
# </Intestazione>
# <Descrizione>
# <Documento id="1" nome="{nome_doc}">
# <DescrizioneDocumento>{nome_doc}</DescrizioneDocumento>
# <TipoDocumento>{tipo_doc}</TipoDocumento>
# </Documento>
# <Allegati>
# <!-- Allegati -->
# </Allegati>
# </Descrizione>
# <ApplicativoProtocollo nome="ArchiPRO">
# <Parametro nome="agd" valore="{agd}"/>
# <Parametro nome="uo" valore="{uo}"/>
# </ApplicativoProtocollo>
# </Segnatura>
# """

# END PROTOCOLLO

# statistics
STATS_SHOW_TICKETS_BY_USER = os.getenv("STATS_SHOW_TICKETS_BY_USER", "False").lower() in ("true", "1", "yes")
STATS_MAX_DAYS = int(os.getenv("STATS_MAX_DAYS", "30"))

# default template to extends
# Default Bootstrap Italia template: "bootstrap-italia-base.html"
# Example: Unical template: "base-setup.html"
DEFAULT_BASE_TEMPLATE = os.getenv("DEFAULT_BASE_TEMPLATE", "bootstrap-italia-base.html")

LOGO_URL = os.getenv("LOGO_URL", "https://www.fondazioneumg.it/immagini/logo/logo-ente.png")
